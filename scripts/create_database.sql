-- Hospital Management System Database Setup
-- Database: HMS (Hospital Management System)
-- Author: HMS Development Team
-- Description: Complete database schema for hospital management

-- Create database if it doesn't exist (UPPERCASE to match your existing database)
CREATE DATABASE IF NOT EXISTS HMS;
USE HMS;

-- Drop tables if they exist (for clean setup)
DROP TABLE IF EXISTS appointments;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS doctors;
DROP TABLE IF EXISTS patients;

-- Create patients table
CREATE TABLE patients (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    gender ENUM('Male', 'Female', 'Other') NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(100),
    address TEXT,
    medical_history TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Indexes for better performance
    INDEX idx_name (name),
    INDEX idx_phone (phone),
    INDEX idx_created_at (created_at)
);

-- Create doctors table
CREATE TABLE doctors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(100),
    experience INT DEFAULT 0,
    fee DECIMAL(10,2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Indexes for better performance
    INDEX idx_name (name),
    INDEX idx_specialization (specialization),
    INDEX idx_phone (phone)
);

-- Create appointments table
CREATE TABLE appointments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    patient_id INT NOT NULL,
    doctor_id INT NOT NULL,
    appointment_date DATETIME NOT NULL,
    fee DECIMAL(10,2) DEFAULT 0.00,
    status ENUM('Scheduled', 'Completed', 'Cancelled') DEFAULT 'Scheduled',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,
    FOREIGN KEY (doctor_id) REFERENCES doctors(id) ON DELETE CASCADE,
    
    -- Indexes for better performance
    INDEX idx_appointment_date (appointment_date),
    INDEX idx_patient_id (patient_id),
    INDEX idx_doctor_id (doctor_id),
    INDEX idx_status (status)
);

-- Create staff table for admin login
CREATE TABLE staff (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- SHA-256 hashed password
    role ENUM('Admin', 'Doctor', 'Nurse', 'Receptionist') DEFAULT 'Admin',
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Indexes
    INDEX idx_username (username),
    INDEX idx_role (role)
);

-- Insert admin user with CORRECT password hash for 'admin123'
-- This hash is generated by Python's hashlib.sha256('admin123'.encode()).hexdigest()
INSERT INTO staff (username, password, role, name, email, phone) VALUES 
('admin', '240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9', 'Admin', 'System Administrator', 'admin@hospital.com', '(555) 000-0001');

-- Insert sample patients
INSERT INTO patients (name, age, gender, phone, email, address, medical_history) VALUES 
('John Smith', 35, 'Male', '(555) 123-4567', 'john.smith@email.com', '123 Main St, Anytown, ST 12345', 'No known allergies. History of hypertension.'),
('Sarah Johnson', 28, 'Female', '(555) 234-5678', 'sarah.j@email.com', '456 Oak Ave, Somewhere, ST 12346', 'Allergic to penicillin. No chronic conditions.'),
('Michael Brown', 45, 'Male', '(555) 345-6789', 'mike.brown@email.com', '789 Pine Rd, Elsewhere, ST 12347', 'Diabetic. Regular medication required.'),
('Emily Davis', 32, 'Female', '(555) 456-7890', 'emily.davis@email.com', '321 Elm St, Nowhere, ST 12348', 'Asthmatic. Carries inhaler.'),
('Robert Wilson', 58, 'Male', '(555) 567-8901', 'rob.wilson@email.com', '654 Maple Dr, Anywhere, ST 12349', 'Heart condition. Under cardiologist care.');

-- Insert sample doctors
INSERT INTO doctors (name, specialization, phone, email, experience, fee) VALUES 
('Dr. James Anderson', 'Cardiology', '(555) 111-2222', 'j.anderson@hospital.com', 15, 200.00),
('Dr. Lisa Martinez', 'Pediatrics', '(555) 222-3333', 'l.martinez@hospital.com', 10, 150.00),
('Dr. David Thompson', 'Orthopedics', '(555) 333-4444', 'd.thompson@hospital.com', 12, 180.00),
('Dr. Jennifer Lee', 'Dermatology', '(555) 444-5555', 'j.lee@hospital.com', 8, 160.00),
('Dr. Mark Garcia', 'Internal Medicine', '(555) 555-6666', 'm.garcia@hospital.com', 20, 175.00);

-- Insert sample appointments
INSERT INTO appointments (patient_id, doctor_id, appointment_date, fee, status, notes) VALUES 
(1, 1, '2024-01-15 10:00:00', 200.00, 'Scheduled', 'Regular cardiology checkup'),
(2, 2, '2024-01-15 14:30:00', 150.00, 'Scheduled', 'Child wellness visit'),
(3, 5, '2024-01-16 09:15:00', 175.00, 'Scheduled', 'Diabetes management consultation'),
(4, 4, '2024-01-16 11:45:00', 160.00, 'Completed', 'Skin condition follow-up'),
(5, 1, '2024-01-17 15:20:00', 200.00, 'Scheduled', 'Heart condition monitoring'),
(1, 3, '2024-01-18 08:30:00', 180.00, 'Scheduled', 'Joint pain evaluation'),
(2, 2, '2024-01-19 13:00:00', 150.00, 'Scheduled', 'Vaccination appointment');

-- Create views for common queries

-- View for appointment details with patient and doctor names
CREATE VIEW appointment_details AS
SELECT 
    a.id,
    a.appointment_date,
    a.fee,
    a.status,
    a.notes,
    p.name AS patient_name,
    p.phone AS patient_phone,
    d.name AS doctor_name,
    d.specialization AS doctor_specialization
FROM appointments a
JOIN patients p ON a.patient_id = p.id
JOIN doctors d ON a.doctor_id = d.id;

-- View for patient summary
CREATE VIEW patient_summary AS
SELECT 
    p.id,
    p.name,
    p.age,
    p.gender,
    p.phone,
    p.email,
    COUNT(a.id) AS total_appointments,
    MAX(a.appointment_date) AS last_appointment
FROM patients p
LEFT JOIN appointments a ON p.id = a.patient_id
GROUP BY p.id, p.name, p.age, p.gender, p.phone, p.email;

-- Display success message
SELECT 'Hospital Management System database setup completed successfully!' AS message;

-- Display table counts
SELECT 
    (SELECT COUNT(*) FROM patients) AS total_patients,
    (SELECT COUNT(*) FROM doctors) AS total_doctors,
    (SELECT COUNT(*) FROM appointments) AS total_appointments,
    (SELECT COUNT(*) FROM staff) AS total_staff;
